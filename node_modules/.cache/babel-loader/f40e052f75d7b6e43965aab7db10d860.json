{"ast":null,"code":"/*!\n * Tap listener v2.0.0\n * listens to taps\n * MIT license\n */\n\n/*jshint browser: true, unused: true, undef: true, strict: true */\n(function (window, factory) {\n  // universal module definition\n\n  /*jshint strict: false*/\n\n  /*globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['unipointer/unipointer'], function (Unipointer) {\n      return factory(window, Unipointer);\n    });\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('unipointer'));\n  } else {\n    // browser global\n    window.TapListener = factory(window, window.Unipointer);\n  }\n})(window, function factory(window, Unipointer) {\n  'use strict'; // --------------------------  TapListener -------------------------- //\n\n  function TapListener(elem) {\n    this.bindTap(elem);\n  } // inherit Unipointer & EventEmitter\n\n\n  var proto = TapListener.prototype = Object.create(Unipointer.prototype);\n  /**\n   * bind tap event to element\n   * @param {Element} elem\n   */\n\n  proto.bindTap = function (elem) {\n    if (!elem) {\n      return;\n    }\n\n    this.unbindTap();\n    this.tapElement = elem;\n\n    this._bindStartEvent(elem, true);\n  };\n\n  proto.unbindTap = function () {\n    if (!this.tapElement) {\n      return;\n    }\n\n    this._bindStartEvent(this.tapElement, true);\n\n    delete this.tapElement;\n  };\n  /**\n   * pointer up\n   * @param {Event} event\n   * @param {Event or Touch} pointer\n   */\n\n\n  proto.pointerUp = function (event, pointer) {\n    // ignore emulated mouse up clicks\n    if (this.isIgnoringMouseUp && event.type == 'mouseup') {\n      return;\n    }\n\n    var pointerPoint = Unipointer.getPointerPoint(pointer);\n    var boundingRect = this.tapElement.getBoundingClientRect();\n    var scrollX = window.pageXOffset;\n    var scrollY = window.pageYOffset; // calculate if pointer is inside tapElement\n\n    var isInside = pointerPoint.x >= boundingRect.left + scrollX && pointerPoint.x <= boundingRect.right + scrollX && pointerPoint.y >= boundingRect.top + scrollY && pointerPoint.y <= boundingRect.bottom + scrollY; // trigger callback if pointer is inside element\n\n    if (isInside) {\n      this.emitEvent('tap', [event, pointer]);\n    } // set flag for emulated clicks 300ms after touchend\n\n\n    if (event.type != 'mouseup') {\n      this.isIgnoringMouseUp = true; // reset flag after 300ms\n\n      var _this = this;\n\n      setTimeout(function () {\n        delete _this.isIgnoringMouseUp;\n      }, 400);\n    }\n  };\n\n  proto.destroy = function () {\n    this.pointerDone();\n    this.unbindTap();\n  }; // -----  ----- //\n\n\n  return TapListener;\n});","map":null,"metadata":{},"sourceType":"script"}